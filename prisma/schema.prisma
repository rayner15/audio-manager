// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id            String       @id @default(uuid())
    username      String       @unique
    email         String       @unique
    password_hash String
    createdAt     DateTime     @default(now()) @map("created_at")
    updatedAt     DateTime     @updatedAt @map("updated_at")
    profile       UserProfile?
    audioFiles    AudioFile[]
    auditLogs     AuditLog[]

    @@map("ACCOUNT")
}

model UserProfile {
    id        String   @id @default(uuid())
    accountId String   @unique @map("account_id")
    account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
    firstName String?  @map("first_name")
    lastName  String?  @map("last_name")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("USER_PROFILE")
}

model Category {
    id         String      @id @default(uuid())
    name       String      @unique
    audioFiles AudioFile[]

    @@map("CATEGORY")
}

model AudioFile {
    id          String   @id @default(uuid())
    accountId   String   @map("account_id")
    account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
    categoryId  String   @map("category_id")
    category    Category @relation(fields: [categoryId], references: [id])
    fileName    String   @map("file_name")
    filePath    String   @map("file_path")
    description String?  @db.Text
    mimeType    String   @map("mime_type")
    sizeBytes   Int      @map("size_bytes")
    uploadedAt  DateTime @default(now()) @map("uploaded_at")

    @@unique([id, accountId])
    @@map("AUDIO_FILES")
}

model AuditLog {
    id        String   @id @default(uuid())
    accountId String?  @map("account_id")
    account   Account? @relation(fields: [accountId], references: [id], onDelete: SetNull)
    action    Action
    entity    String
    entityId  String?  @map("entity_id")
    details   Json?
    timestamp DateTime @default(now())

    @@map("AUDIT_LOG")
}

enum Action {
    CREATE
    READ
    UPDATE
    DELETE
}
